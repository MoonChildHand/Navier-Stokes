local crypto = require("crypto")

local NavierStokesFourier = {}

function NavierStokesFourier:new(gridSize, viscosity, density)
  local obj = {
    u = {},
    viscosity = viscosity,
    density = density
  }
  for i = 1, gridSize do
    obj.u[i] = {}
    for j = 1, gridSize do
      obj.u[i][j] = 0
    end
  end
  setmetatable(obj, {__index = self})
  return obj
end

function NavierStokesFourier:updateVelocityField()
  local gridSize = #self.u
  local laplacian = {}
  for i = 1, gridSize do
    laplacian[i] = {}
    for j = 1, gridSize do
      laplacian[i][j] = 0
    end
  end

  for i = 2, gridSize - 1 do
    for j = 2, gridSize - 1 do
      laplacian[i][j] =
        self.u[i + 1][j] + self.u[i - 1][j] + self.u[i][j + 1] + self.u[i][j - 1] - 4 * self.u[i][j]
    end
  end

  for i = 1, gridSize do
    for j = 1, gridSize do
      self.u[i][j] = self.u[i][j] + (self.viscosity * laplacian[i][j]) / self.density
    end
  end
end

function NavierStokesFourier:hashVelocityField()
  local data = ""
  for i = 1, #self.u do
    for j = 1, #self.u[i] do
      data = data .. self.u[i][j]
    end
  end
  local hash = crypto.digest("sha256", data)
  return hash
end

local nsf = NavierStokesFourier:new(50, 0.1, 1.0)
nsf:updateVelocityField()
print("Velocity Field Hash: " .. nsf:hashVelocityField())
