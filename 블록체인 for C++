#include <iostream>
#include <vector>
#include <string>
#include <ctime>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <memory>

#define GRID_SIZE 50
#define TIME_STEPS 100

class Block {
public:
    int index;
    std::string timestamp;
    std::string data;
    std::string previous_hash;
    std::string hash;

    Block(int index, const std::string& timestamp, const std::string& data, const std::string& previous_hash)
        : index(index), timestamp(timestamp), data(data), previous_hash(previous_hash) {
        this->hash = calculate_hash();
    }

    std::string calculate_hash() const {
        std::stringstream ss;
        ss << index << timestamp << data << previous_hash;
        std::string block_data = ss.str();
        unsigned int hash_value = 0;
        for (char c : block_data) {
            hash_value = (hash_value << 5) + c;
        }
        std::stringstream hex_ss;
        hex_ss << std::hex << hash_value;
        return hex_ss.str();
    }
};

class NavierStokesWithFourier {
public:
    int grid_size;
    int time_steps;
    double viscosity;
    double density;
    std::vector<std::vector<double>> u; // Velocity field (u direction)
    std::vector<std::vector<double>> v; // Velocity field (v direction)
    std::vector<Block> blockchain;

    NavierStokesWithFourier(int grid_size, int time_steps, double viscosity, double density)
        : grid_size(grid_size), time_steps(time_steps), viscosity(viscosity), density(density),
          u(grid_size, std::vector<double>(grid_size, 0.0)),
          v(grid_size, std::vector<double>(grid_size, 0.0)) {
        create_genesis_block();
    }

    void create_genesis_block() {
        time_t now = time(NULL);
        tm* t = localtime(&now);
        std::stringstream ss;
        ss << std::put_time(t, "%Y-%m-%d %H:%M:%S");
        std::string timestamp = ss.str();
        blockchain.emplace_back(0, timestamp, "Genesis Block", "0");
    }

    void add_block(const std::string& data) {
        time_t now = time(NULL);
        tm* t = localtime(&now);
        std::stringstream ss;
        ss << std::put_time(t, "%Y-%m-%d %H:%M:%S");
        std::string timestamp = ss.str();
        int index = blockchain.back().index + 1;
        std::string previous_hash = blockchain.back().hash;
        blockchain.emplace_back(index, timestamp, data, previous_hash);
    }

    void print_blockchain() const {
        std::cout << "Blockchain data:\n";
        for (const auto& block : blockchain) {
            std::cout << "Block #" << block.index << std::endl;
            std::cout << "  Timestamp: " << block.timestamp << std::endl;
            std::cout << "  Hash: " << block.hash << std::endl;
            std::cout << "  Previous Hash: " << block.previous_hash << std::endl;
            std::cout << "  Data: " << block.data.substr(0, 50) << "...\n\n";
        }
    }

    // Navier-Stokes simulation (simplified)
    void simulate_navier_stokes() {
        // Very basic example - you'll need a proper solver
        for (int t = 0; t < time_steps; ++t) {
            for (int i = 0; i < grid_size; ++i) {
                for (int j = 0; j < grid_size; ++j) {
                    // Example: Diffusion (very simplified)
                    u[i][j] = u[i][j] + viscosity * (get_laplacian(u, i, j));
                    v[i][j] = v[i][j] + viscosity * (get_laplacian(v, i, j));
                }
            }
            add_simulation_data_to_blockchain(t);
        }
    }

    double get_laplacian(const std::vector<std::vector<double>>& field, int i, int j) const {
        // Discrete Laplacian approximation
        double sum = 0.0;
        if (i > 0) sum += field[i - 1][j];
        if (i < grid_size - 1) sum += field[i + 1][j];
        if (j > 0) sum += field[i][j - 1];
        if (j < grid_size - 1) sum += field[i][j + 1];
        return (sum - 4.0 * field[i][j]);
    }

    void add_simulation_data_to_blockchain(int step) {
        std::stringstream ss;
        ss << "Simulation Step: " << step << " - u[0][0]: " << u[0][0] << ", v[0][0]: " << v[0][0];
        add_block(ss.str());
    }
};

int main() {
    NavierStokesWithFourier ns_simulator(GRID_SIZE, TIME_STEPS, 0.1, 1.0);

    ns_simulator.simulate_navier_stokes();

    ns_simulator.print_blockchain();

    return 0;
}
