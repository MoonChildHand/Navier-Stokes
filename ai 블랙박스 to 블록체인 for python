import numpy as np
import hashlib

class NavierStokesWithFourier:
    """
    나비에-스토크스 방정식의 푸리에 변환 기반 구현 및 속도장 특성 분석
    """
    def __init__(self, grid_size, time_steps, viscosity, density):
        self.grid_size = grid_size
        self.time_steps = time_steps
        self.viscosity = viscosity
        self.density = density
        self.u = np.zeros((grid_size, grid_size))  # 속도장 초기화 (u 방향)
        self.v = np.zeros((grid_size, grid_size))  # 속도장 초기화 (v 방향)
        self.blockchain = []  # 블록체인 저장소
        self.create_genesis_block()

    def create_genesis_block(self):
        """
        제네시스 블록 생성
        """
        genesis_block = {
            'index': 0,
            'timestamp': np.datetime64('now'),
            'data': "Genesis Block",
            'previous_hash': "0",
            'hash': self.hash_block("Genesis Block" + "0")
        }
        self.blockchain.append(genesis_block)

    def hash_block(self, block_data):
        """
        블록 데이터를 SHA-256 해시로 변환
        """
        if isinstance(block_data, dict):
            block_data = str(block_data)
        return hashlib.sha256(block_data.encode()).hexdigest()

    def add_block(self, data):
        """
        새로운 블록 추가
        """
        previous_block = self.blockchain[-1]
        new_block = {
            'index': previous_block['index'] + 1,
            'timestamp': np.datetime64('now'),
            'data': data,
            'previous_hash': previous_block['hash'],
            'hash': None
        }
        new_block['hash'] = self.hash_block(str(new_block))
        self.blockchain.append(new_block)
        
    def apply_fourier_transform(self):
        """
        속도장에 푸리에 변환 적용
        """
        u_fft = np.fft.fft2(self.u)  # u 성분의 푸리에 변환
        v_fft = np.fft.fft2(self.v)  # v 성분의 푸리에 변환
        
        return u_fft, v_fft

    def update_velocity_field(self):
        """
        나비에-스토크스 방정식을 사용하여 속도장 업데이트
        """
        for _ in range(self.time_steps):
            laplacian_u = np.roll(self.u, 1, axis=0) + np.roll(self.u, -1, axis=0) + \
                          np.roll(self.u, 1, axis=1) + np.roll(self.u, -1, axis=1) - 4 * self.u
            laplacian_v = np.roll(self.v, 1, axis=0) + np.roll(self.v, -1, axis=0) + \
                          np.roll(self.v, 1, axis=1) + np.roll(self.v, -1, axis=1) - 4 * self.v
            
            # 나비에-스토크스 시간 업데이트
            self.u += self.viscosity * laplacian_u / self.density
            self.v += self.viscosity * laplacian_v / self.density

    def analyze_velocity_field(self):
        """
        마할라노비스 거리와 쌍곡선 속도를 기반으로 속도장 특성 분석
        """
        u_fft, v_fft = self.apply_fourier_transform()
        
        # 마할라노비스 거리 계산 (u와 v의 공분산 행렬 사용)
        cov_matrix = np.cov([self.u.flatten(), self.v.flatten()])
        
        u_mean = np.mean(self.u)
        v_mean = np.mean(self.v)
        
        mahalanobis_distance = (np.array([u_mean, v_mean]) @ 
                                np.linalg.inv(cov_matrix) @ 
                                np.array([u_mean, v_mean]).T)
        
        # 쌍곡선 속도 계산 (푸리에 도메인에서 sech^2 적용)
        hyperbolic_velocity_u = -1j * u_fft * (np.cosh(np.pi * u_fft)**-2)
        
        return {
            "mahalanobis_distance": mahalanobis_distance,
            "hyperbolic_velocity_u": hyperbolic_velocity_u.tolist(),
            "fourier_transform_u": u_fft.tolist(),
            "fourier_transform_v": v_fft.tolist()
        }

    def simulate_and_record(self):
        """
        시뮬레이션 실행 및 결과를 블록체인에 기록
        """
        for _ in range(10):  # 예제: 10번 반복 시뮬레이션 수행
            self.update_velocity_field()
            
            analysis_results = self.analyze_velocity_field()
            
            block_data = {
                "velocity_field_u": self.u.tolist(),
                "velocity_field_v": self.v.tolist(),
                "analysis_results": analysis_results,
                "navier_stokes_time": 1 / np.mean(np.abs(np.fft.fft2(self.u)))  # 시간 계산
            }
            
            self.add_block(block_data)

# 사용 예제 실행
ns_simulator = NavierStokesWithFourier(grid_size=50, time_steps=100, viscosity=0.1, density=1.0)
ns_simulator.simulate_and_record()

print("블록체인 데이터:")
for block in ns_simulator.blockchain:
    print(block)

