using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    static string CheckConditions(Dictionary<string, bool> data)
    {
        if (!data["kidney_blood_flow_normal"]) return "콩팥/달팽이관 혈류 이상";
        if (!data["diencephalon_flow"]) return "뇌수 흐름 방향 이상";
        return "정상";
    }

    static string CheckCirculatorySystem(Dictionary<string, bool> data)
    {
        if (!data["filtered_components"]) return "간에서 여과된 성분이 췌장으로 전달되지 않음";
        if (!data["hormone_levels"]) return "대뇌 호르몬 이상";
        return "정상";
    }

    static string CheckBloodCells(Dictionary<string, bool> data)
    {
        if (data["rbc_in_lung"]) return "전도체 약물 권장";
        if (data["wbc_mixed"]) return "열전도율이 높은 액체 권장";
        if (data["brain_reverse_flow"]) return "억제제 및 소화제 권장";
        return "정상";
    }

    static bool CheckUnitVectors(List<double[]> unitVectors)
    {
        double[] reference = unitVectors[0];
        for (int i = 1; i < unitVectors.Count; i++)
        {
            double magnitude = Math.Sqrt(unitVectors[i][0] * unitVectors[i][0] + unitVectors[i][1] * unitVectors[i][1]);
            double[] normalized = { unitVectors[i][0] / magnitude, unitVectors[i][1] / magnitude };

            if (!normalized.SequenceEqual(reference)) return false;
        }
        return true;
    }

    static string CheckReproductiveSystem(Dictionary<string, object> data)
    {
        if (!(bool)data["protein_intake"]) return "동물성 단백질 섭취 필요";
        if ((int)data["rbc_wbc_ratio"] != 1) return "적혈구와 백혈구의 균형 이상";
        return "정상";
    }

    static string CheckDigestionNutrition(Dictionary<string, bool> data)
    {
        if (!data["mineral_intake"]) return "식물성 무기질 섭취 부족";
        return "정상";
    }

    static string CheckRehabilitation(Dictionary<string, bool> data)
    {
        if (data["rehabilitation_needed"]) return "10년 이상의 재활 필요";
        if (data["neural_disorder"]) return "신경계 문제 확인 필요";
        return "정상";
    }

    static void Main(string[] args)
    {
        var patientData = new Dictionary<string, object>
        {
            { "kidney_blood_flow_normal", true },
            { "diencephalon_flow", true },
            { "filtered_components", true },
            { "hormone_levels", true },
            { "rbc_in_lung", false },
            { "wbc_mixed", false },
            { "brain_reverse_flow", false },
            { "protein_intake", true },
            { "rbc_wbc_ratio", 1 },
            { "mineral_intake", true },
            { "rehabilitation_needed", false },
            { "neural_disorder", false }
        };

        var unitVectors = new List<double[]>
        {
            new double[] { 1, 0 },
            new double[] { 1, 0 }
        };

        Console.WriteLine("Initial Conditions: " + CheckConditions(patientData.ToDictionary(k => k.Key, k => (bool)k.Value)));
        Console.WriteLine("Circulatory System: " + CheckCirculatorySystem(patientData.ToDictionary(k => k.Key, k => (bool)k.Value)));
        Console.WriteLine("Blood Cells: " + CheckBloodCells(patientData.ToDictionary(k => k.Key, k => (bool)k.Value)));
        Console.WriteLine("Unit Vector Consistency: " + (CheckUnitVectors(unitVectors) ? "정상" : "불일치"));
        Console.WriteLine("Reproductive System: " + CheckReproductiveSystem(patientData));
        Console.WriteLine("Digestion & Nutrition: " + CheckDigestionNutrition(patientData.ToDictionary(k => k.Key, k => (bool)k.Value)));
        Console.WriteLine("Rehabilitation: " + CheckRehabilitation(patientData.ToDictionary(k => k.Key, k => (bool)k.Value)));
    }
}

