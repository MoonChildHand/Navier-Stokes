require 'digest'
require 'time'

class Block
  attr_reader :index, :timestamp, :data, :previous_hash, :hash

  def initialize(index, timestamp, data, previous_hash)
    @index = index
    @timestamp = timestamp
    @data = data
    @previous_hash = previous_hash
    @hash = calculate_hash
  end

  def calculate_hash
    Digest::SHA256.hexdigest("#{index}#{timestamp}#{data}#{previous_hash}")
  end
end

class NavierStokesWithFourier
  attr_reader :grid_size, :time_steps, :viscosity, :density, :blockchain

  def initialize(grid_size, time_steps, viscosity, density)
    @grid_size = grid_size
    @time_steps = time_steps
    @viscosity = viscosity
    @density = density
    @u = Array.new(grid_size) { Array.new(grid_size, 0.0) }
    @v = Array.new(grid_size) { Array.new(grid_size, 0.0) }
    @blockchain = []
    create_genesis_block
  end

  def create_genesis_block
    genesis_block = Block.new(0, current_timestamp, "Genesis Block", "0")
    @blockchain << genesis_block
  end

  def add_block(data)
    previous_block = @blockchain.last
    new_block = Block.new(previous_block.index + 1, current_timestamp, data, previous_block.hash)
    @blockchain << new_block
  end

  def current_timestamp
    Time.now.utc.iso8601
  end

  def print_blockchain
    puts "Blockchain data:"
    @blockchain.each do |block|
      puts "Block ##{block.index}"
      puts "  Timestamp: #{block.timestamp}"
      puts "  Hash: #{block.hash}"
      puts "  Previous Hash: #{block.previous_hash}"
      puts "  Data: #{block.data[0..50]}..." if block.data.length > 50
      puts
    end
  end
end

# Main
def main
  ns_simulator = NavierStokesWithFourier.new(50, 100, 0.1, 1.0)

  # Example simulation and block addition
  10.times do |i|
    ns_simulator.add_block("Simulation Step Data #{i + 1}")
  end

  ns_simulator.print_blockchain
end

main

