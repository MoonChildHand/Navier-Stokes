function checkConditions(data) {
    // 초기 조건 확인: 신체의 기본 혈류 상태를 확인합니다.
    if (!data.kidney_blood_flow_normal) {
        return "콩팥과 달팽이관 간 모세혈관 혈액순환 이상";
    }
    if (!data.diencephalon_flow) {
        return "뇌수 흐름 방향 이상";
    }
    return "정상";
}

function checkCirculatoryAndDigestiveSystem(data) {
    // 심혈관계와 소화 시스템 검사: 간에서 여과된 성분이 췌장으로 전달되는지 확인합니다.
    if (!data.filtered_components) {
        return "간에서 여과된 성분이 췌장으로 전달되지 않음";
    }
    if (!data.hormone_levels) {
        return "대뇌 호르몬 수치 이상";
    }
    return "정상";
}

function checkBloodCells(data) {
    // 백혈구 및 적혈구 상태 검사: 혈액 성분의 이상 여부를 확인합니다.
    if (data.rbc_in_lung) {
        return "폐순환에서 적혈구 발견 - 백혈병 가능성";
    }
    if (data.wbc_mixed) {
        return "백혈구 섞임 - 열전도율이 높은 액체 복용 권장";
    }
    if (data.brain_reverse_flow) {
        return "뇌수 역류 - 억제제 및 소화제 복용 권장";
    }
    return "정상";
}

function checkUnitVectors(unit_vectors) {
    // 단위 벡터 유지 확인: 장기의 벡터가 일치하는지 확인합니다.
    const reference = normalize(unit_vectors[0]);
    for (const vector of unit_vectors) {
        if (!arraysAreEqual(normalize(vector), reference)) {
            return false;
        }
    }
    return true;
}

function normalize(vector) {
    // 벡터 정규화: 벡터를 표준 형태로 변환합니다.
    const magnitude = Math.sqrt(vector.reduce((sum, v) => sum + v * v, 0));
    return vector.map(v => v / magnitude);
}

function arraysAreEqual(arr1, arr2) {
    if (arr1.length !== arr2.length) return false;
    for (let i = 0; i < arr1.length; i++) {
        if (arr1[i] !== arr2[i]) return false;
    }
    return true;
}

function checkReproductiveSystem(data) {
    // 생식 관련 요소 확인: 단백질 섭취 여부와 혈구 비율 확인.
    if (!data.protein_intake) {
        return "동물성 단백질 섭취 필요";
    }
    if (data.rbc_wbc_ratio !== 1) {
        return "적혈구와 백혈구의 비율 불균형";
    }
    return "정상";
}

function checkDigestionNutrition(data) {
    // 소화 및 영양 상태 검사: 식물성 무기질 섭취 여부를 확인합니다.
    if (!data.mineral_intake) {
        return "식물성 무기질 섭취 부족";
    }
    return "정상";
}

function navierStokesTransform(u, omega) {
    // 나비에-스토크스 기반 속도장 계산: 유체의 속도를 계산합니다.
    return u.map((val, i) => val / (1.0 * omega[i]));
}

function linearCombinationTransform(a1, f_v, a2, f_t) {
    // 선형 결합 계산: 물리적 데이터를 선형 결합하여 새로운 벡터를 만듭니다.
    return f_v.map((val, i) => a1 * f_v[i] + a2 * f_t[i]);
}

function mahalanobisDistance(x, sigma) {
    // 마할라노비스 거리 계산: 데이터의 이상 여부를 판별합니다.
    const inv_sigma = invertMatrix(sigma);
    const inv_sigma_x = matrixVectorMultiply(inv_sigma, x);
    return dotProduct(x, inv_sigma_x);
}

function hyperbolicSpeed(sech_coeff, nu) {
    // 쌍곡선 속력 계산: 특정 물리적 환경에서의 속력을 계산합니다.
    return -sech_coeff * Math.pow(1.0 / Math.cosh(nu), 2);
}

function recommendMedication(data) {
    // 약물 추천: 특정 상황에서 적절한 약물을 추천합니다.
    if (data.rbc_in_lung) {
        return "전도체를 가진 약물 복용";
    }
    if (data.wbc_mixed) {
        return "열전도율이 높은 액체 복용";
    }
    if (data.brain_reverse_flow) {
        return "억제제 및 소화제 복용";
    }
    return "추천되는 약물 없음";
}

function checkRehabilitation(data) {
    // 재활 및 신경 상태 확인: 신경 상태와 재활 필요 여부를 점검합니다.
    if (data.rehabilitation_needed) {
        return "10년 이상의 재활 필요";
    }
    if (data.neural_disorder) {
        return "신경계 문제 확인 필요";
    }
    return "정상";
}

function diagnoseWithFourier(data, unit_vectors) {
    // 병질 구분 통합 알고리즘
    const results = {
        "Initial Conditions": checkConditions(data),
        "Circulatory and Digestive System": checkCirculatoryAndDigestiveSystem(data),
        "Blood Cells": checkBloodCells(data),
        "Unit Vector Consistency": checkUnitVectors(unit_vectors) ? "정상" : "불일치",
        "Reproductive System": checkReproductiveSystem(data),
        "Digestion & Nutrition": checkDigestionNutrition(data),
        "Medication Recommendation": recommendMedication(data),
        "Rehabilitation": checkRehabilitation(data)
    };
    return results;
}

function invertMatrix(matrix) {
    // 매트릭스 역행렬 계산 (구체적인 구현 필요)
    // 실제 구현 필요
    return matrix;
}

function matrixVectorMultiply(matrix, vector) {
    // 행렬-벡터 곱셈
    const rows = matrix.length;
    const cols = matrix[0].length;
    const result = new Array(rows).fill(0);
    for (let i = 0; i < rows; i++) {
        for (let j = 0; j < cols; j++) {
            result[i] += matrix[i][j] * vector[j];
        }
    }
    return result;
}

function dotProduct(vec1, vec2) {
    // 내적 계산
    return vec1.reduce((sum, val, i) => sum + val * vec2[i], 0);
}

// 예제 데이터
const patient_data = {
    "kidney_blood_flow_normal": true,
    "diencephalon_flow": true,
    "filtered_components": true,
    "hormone_levels": true,
    "rbc_in_lung": false,
    "wbc_mixed": false,
    "brain_reverse_flow": false,
    "protein_intake": true,
    "rbc_wbc_ratio": 1,
    "mineral_int
